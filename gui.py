#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Feb 19 13:04:08 2013
#Goear Downloader 1.6.1

import wx
import labels
import threads
from threads import *
import itertools
# begin wxGlade: extracode
# end wxGlade
from wx.lib.newevent import NewEvent
from goearsearch import *
from labels import *
from multiprocessing import Pool
from multiprocessing import Process
import threading
import time
import os
songs=[]

import Queue
#self.selectedSongCount=0

class PopUp(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PopUp.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "Congratulations! All your selected songs have been downloaded! Elapsed Time:  ")
        self.button_ok = wx.Button(self, -1, "Ok!")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        
    def setValues(self,msg,title):
        self.label_1.SetLabel(msg)
        self.SetTitle(title)
    def __set_properties(self):
        # begin wxGlade: PopUp.__set_properties
        self.SetTitle("")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PopUp.__do_layout
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_13_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13_copy.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(sizer_13_copy, 1, wx.EXPAND, 0)
        sizer_13.Add(self.button_ok, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_13)
        sizer_13.Fit(self)
        self.Layout()
        # end wxGlade

# end of class PopUp


class goearSearch(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: goearSearch.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_preferences = wx.Panel(self.notebook_1, -1)
        self.notebook_1_search = wx.Panel(self.notebook_1, -1)
        self.sizer_10_staticbox = wx.StaticBox(self.notebook_1_search, -1, "Songs to download:")
        self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_search, -1, "Result of the search")
        self.searchLabel = wx.StaticText(self.notebook_1_search, -1, "Insert a song name or artist: ", style=wx.ALIGN_CENTRE)
        self.searchTextBox = wx.TextCtrl(self.notebook_1_search, -1, "")
        self.searchButton = wx.Button(self.notebook_1_search, -1, "Search")
        self.searchResult = wx.ListCtrl(self.notebook_1_search, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.moveLeftButton = wx.Button(self.notebook_1_search, -1, "<------")
        self.moveRightButton = wx.Button(self.notebook_1_search, -1, "------>")
        self.selectedList = wx.ListCtrl(self.notebook_1_search, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.downloadingList = wx.ListCtrl(self.notebook_1_search, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.downloadButton = wx.Button(self.notebook_1_search, -1, "Download")
        self.label_multiprocess = wx.StaticText(self.notebook_1_preferences, -1, "Process preferences:")
        self.label_numprocess = wx.StaticText(self.notebook_1_preferences, -1, "Number of Process/Threads: ")
        self.combo_box_numprocess = wx.ComboBox(self.notebook_1_preferences, -1, choices=["1", "2", "3", "4", "5", "6"], style=wx.CB_DROPDOWN)
        self.checkbox_multiprocess = wx.CheckBox(self.notebook_1_preferences, -1, "Multiprocess Usage")
        self.button_1 = wx.Button(self.notebook_1_preferences, -1, "Apply")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.searchHandler, self.searchButton)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.searchSelected, self.searchResult)
        self.Bind(wx.EVT_BUTTON, self.moveLeftHandler, self.moveLeftButton)
        self.Bind(wx.EVT_BUTTON, self.moveRightHandler, self.moveRightButton)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.selectedListSelected, self.selectedList)
        self.Bind(wx.EVT_BUTTON, self.downloadHandler, self.downloadButton)
        self.Bind(wx.EVT_COMBOBOX, self.OnNumProcessChanged, self.combo_box_numprocess)
        self.Bind(wx.EVT_CHECKBOX, self.OnMultiprocessChanged, self.checkbox_multiprocess)
        # end wxGlade
        self.initLists()
##        
##        self.songs=[]
##        self.selectedSongs=[]
            
        self.songs=[]
        self.selectedSongs=[]
        
        self.selectedSelection=-2
        self.curtime=time.time()
        
        self.numSongs=0
        self.downloadSongCount=0
        #Preferences
        
        self.multiProcess=False
        self.numOfProcess=1
        
        #falta inicializar las preferencias a los valores por def
        
        #
        EVT_BEGIN(self,self.downloadBegin)
        EVT_START(self,self.notifyStartSong)
        EVT_FINISHED(self,self.notifyFinishedSong)
        EVT_END(self,self.downloadFinished)
        self.workerDown=None

    def __set_properties(self):
        # begin wxGlade: goearSearch.__set_properties
        self.SetTitle("frame_3")
        self.SetSize((1176, 822))
        self.searchTextBox.SetMinSize((200, 30))
        self.searchResult.SetMinSize((100, 80))
        self.moveLeftButton.SetMinSize((200, 30))
        self.moveRightButton.SetMinSize((200, 30))
        self.selectedList.SetMinSize((100, 80))
        self.combo_box_numprocess.SetMinSize((60, 29))
        self.combo_box_numprocess.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: goearSearch.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(3, 2, 0, 0)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        listsSizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(self.searchLabel, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_8.Add(self.searchTextBox, 0, wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_8.Add(self.searchButton, 0, wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_7.Add(sizer_8, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_9.Add(self.searchResult, 1, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        listsSizer.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_4.Add(self.moveLeftButton, 0, 0, 3)
        sizer_4.Add(self.moveRightButton, 0, 0, 3)
        listsSizer.Add(sizer_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(self.selectedList, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_6.Add(self.downloadingList, 1, wx.EXPAND, 0)
        sizer_6.Add(self.downloadButton, 0, 0, 3)
        listsSizer.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_1.Add(listsSizer, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_5, 0, wx.EXPAND, 0)
        self.notebook_1_search.SetSizer(sizer_1)
        grid_sizer_1.Add(self.label_multiprocess, 0, 0, 0)
        sizer_12.Add(self.label_numprocess, 0, 0, 0)
        sizer_12.Add(self.combo_box_numprocess, 0, 0, 1)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_11.Add(self.checkbox_multiprocess, 0, 0, 0)
        grid_sizer_1.Add(sizer_11, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_1, 0, 0, 0)
        sizer_3.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.notebook_1_preferences.SetSizer(sizer_3)
        self.notebook_1.AddPage(self.notebook_1_search, "Search")
        self.notebook_1.AddPage(self.notebook_1_preferences, "Preferences")
        sizer_2.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade
    def notifyStartSong(self,event):
        self.enableSelecting(False)
        songName=event.song.name
        songNum=str(event.song.num)

        index=self.downloadingList.InsertStringItem(self.downloadingList.GetItemCount()+1,songNum)
        #Insert in down list
        self.downloadingList.SetStringItem(index,1,songName)
        self.downloadingList.SetStringItem(index,2,"DOWNLOADING...")
        self.downloadingList.SetItemBackgroundColour(index, '#58ACFA')
        #delete from selected list
        self.deleteItemFromList(self.selectedList,songNum)
        
        
    def notifyFinishedSong(self,event):

        songName=event.song.name
        songNum=str(event.song.num)
        
        index = self.getIndexByNum(songNum,self.downloadingList)
        self.downloadingList.SetItemBackgroundColour(index, '#01DF3A')
        self.downloadingList.SetStringItem(index,2,"FINISH!")
        
        self.downloadSongCount+=1
        
        if self.downloadSongCount==self.numSongs:
            self.downloadFinished(None)
        
        #self.selectedSongs.remove(event.song)
##        for song in self.selectedSongs:
##            print event.song.name , " y " , song.name
##            if event.song.name == song.name:
##                self.selectedSongs.remove(song)
        

    def downloadBegin(self,event):
        self.curtime = time.time()
        self.numSongs=len(self.selectedSongs)
        print "Current Time: " , self.curtime

    def downloadFinished(self,event):
        #print "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        self.workerDown=None
        self.enableSelecting(True)
        self.selectedSongs=[]
        
        self.totaltime=time.time()-self.curtime
        
        print self.totaltime
        
        #create the popup
        msg="Congratulations! Elapsed Time:  " + str(self.totaltime)
        title="Downloading finished!!"
        
        finishedPopup= PopUp(None, -1, "")
        finishedPopup.setValues(msg,title)
       # self.SetTopWindow(finishedPopup)
        finishedPopup.Show()
        


    def searchHandler(self, event): # wxGlade: goearSearch.<event_handler>
        pages=1
        query = self.searchTextBox.GetValue()
        self.songs=[]
        self.songs=retrieveList(query,pages)
        i=0
        self.searchResult.DeleteAllItems()
 
        #Song.numsongs=0
        for song in self.songs:
            pos = self.searchResult.InsertStringItem(i,str(song.num))
            self.searchResult.SetStringItem(pos,1,song.name)
            i=i+1
        event.Skip()

    def stopHandler(self, event): # wxGlade: goearSearch.<event_handler>
        print "Event handler `stopHandler' not implemented!"
        event.Skip()

    def searchSelected(self, event): # wxGlade: goearSearch.<event_handler>


        event.Skip()


    def moveLeftHandler(self, event): # wxGlade: goearSearch.<event_handler>
        self.moveSelectedItemsFromListToList(self.selectedList,self.searchResult,self.selectedSongs,self.songs)
        print "Selected : "
        
        for song in self.selectedSongs:
            print song
        print "Search : "
        for song in self.songs:
            print song

    def moveRightHandler(self, event): # wxGlade: goearSearch.<event_handler>

        #Move from result to download list
        self.moveSelectedItemsFromListToList(self.searchResult,self.selectedList,self.songs,self.selectedSongs)
        print "Search : " 
        for song in self.songs:
            print song
        print "Selected : " 
        
        for song in self.selectedSongs:
            print song
            
    def moveSelectedItemsFromListToList(self,list1,list2,songList1,songList2):
        selCount=list1.GetSelectedItemCount()
        index=0
        if selCount>0:
            #Recuperar Elementos a mover
            index=list1.GetFirstSelected()
            selected=[]
            selected.append(index)
            todelete=[]
            todelete.append(list1.GetItem(index, 0).GetText())
            while index!=-1:
                index = list1.GetNextSelected(index)
                if index==-1:
                    break
                else:
                    todelete.append(list1.GetItem(index, 0).GetText())
                    selected.append(index)
                    
             #Mover Elementos
            for itemIndex in selected:
                #Movemos en las listas graficas
                itemNum = list1.GetItem(itemIndex, 0).GetText()
                itemName= list1.GetItem(itemIndex, 1).GetText()
                pos=list2.InsertStringItem(list2.GetItemCount()+1,itemNum)
                list2.SetStringItem(pos,1,itemName)
                #Movemos en las listas de canciones
                curSong=getSongByNum(songList1,itemNum)
                songList1.remove(curSong)
                songList2.append(curSong)
            for item in todelete:
                self.deleteItemFromList(list1,item)    
    def deleteItemFromList(self,listcontrol,item):

        for index in range(-1,listcontrol.GetItemCount()):
            index= listcontrol.GetNextItem(index)
            if item==listcontrol.GetItem(index,0).GetText():
                listcontrol.DeleteItem(index)
                return


    def getItemsList(listControl):
        list=[]
        index=0
        while index!=-1:
            index= listControl.GetNextItem(index)
            if index==-1:
                    break
            else:
                list.append(index)
      

    def getDownloadList(self):
        list=[]
        for i in range(0,self.selectedList.GetItemCount()):
            list.append(int(self.selectedList.GetItem(i).GetText()))

        return list

    def downloadHandler(self, event): # wxGlade: goearSearch.<event_handler>
        
        folder = self.searchTextBox.GetValue()
        folder= folder.replace(" ","-")

        if not os.path.exists(folder):
            os.makedirs(folder)
        numworkers=self.numOfProcess
        
        if numworkers>1:
            selnum= len(self.selectedSongs)
            numperthread=selnum/numworkers
        
            index=0
            for i in range(0,numworkers):
                work=[]
                jota=0
                for j in range (0,numperthread):
                    work.append(self.selectedSongs[j+index])
                    jota+=1
                index=index+jota
                print index+numperthread, "index +"  
                if selnum % numworkers != 0:
                    if index+numperthread>=selnum:
                        for k in range(index,selnum):
                            work.append(self.selectedSongs[k])
                print "trbj " , len(work)
                    #print "Lanzo th: " , " con " , len(work)
                if self.multiProcess == True:
                    p = Process(target=downloadAsync, args=[work,self.searchTextBox.GetValue(),self])
                    p.start()
                else:
                    self.workerDown = ThreadDownload(downloadAsync,[work,self.searchTextBox.GetValue(),self])
                    self.workerDown.start()
        else:
            work=self.selectedSongs
            self.workerDown = ThreadDownload(downloadAsync,[work,self.searchTextBox.GetValue(),self])
            self.workerDown.start()



    def enableSelecting(self,value):
        self.selectedList.Enable(value)
        self.moveLeftButton.Enable(value)
        self.moveRightButton.Enable(value)
        self.downloadButton.Enable(value)
        
    def selectedListSelected(self, event): # wxGlade: goearSearch.<event_handler>
        print self.downloadingSongs


    def OnNumProcessChanged(self, event): # wxGlade: goearSearch.<event_handler>
        self.numOfProcess=int(self.combo_box_numprocess.GetValue())
        event.Skip()

    def OnMultiprocessChanged(self, event): # wxGlade: goearSearch.<event_handler>
        self.multiProcess=True
        event.Skip()

    # end of class goearSearch
    

##    def notifyStartSong(self,songNum,songName):
##        index=self.downloadingList.InsertStringItem(self.downloadingList.GetItemCount()+1,songNum)
##        #Insert in down list
##        self.downloadingList.SetStringItem(index,1,songName)
##        self.downloadingList.SetStringItem(index,2,"DOWNLOADING...")
##        self.downloadingList.SetItemBackgroundColour(index, '#58ACFA')
##        #delete from selected list
##        self.deleteItemFromList(self.selectedList,songNum)
##        
##        
##    def notifyFinishedSong(self,songNum):
##        index = self.getIndexByNum(songNum,self.downloadingList)
##        self.downloadingList.SetItemBackgroundColour(index, '#01DF3A')
##        self.downloadingList.SetStringItem(index,2,"FINISH!")

    def initLists(self):
        column_size=40
        column_size_name=300
        status_size=130
        self.searchResult.InsertColumn(0,"Nº")
        self.searchResult.InsertColumn(1,"Name")
        ##self.searchResult.InsertColumn(2,"Status")
        
        self.selectedList.InsertColumn(0,"Nº")
        self.selectedList.InsertColumn(1,"Name")
        self.selectedList.InsertColumn(2,"Status")
        
        self.searchResult.SetColumnWidth(0, column_size)
        self.searchResult.SetColumnWidth(1, column_size_name)
        ##self.searchResult.SetColumnWidth(2, column_size)
        
        self.selectedList.SetColumnWidth(0, column_size)
        self.selectedList.SetColumnWidth(1, column_size_name)
        self.selectedList.SetColumnWidth(2, status_size)
        
        ##DownloadingList
        self.downloadingList.InsertColumn(0,"Nº")
        self.downloadingList.InsertColumn(1,"Name")
        self.downloadingList.InsertColumn(2,"Status")
        self.downloadingList.SetColumnWidth(0, column_size)
        self.downloadingList.SetColumnWidth(1, column_size_name)
        self.downloadingList.SetColumnWidth(2, status_size)

##    def refreshStatusCol():
##        for i in range(-1,self.selectedList.GetItemCount()):
##             self.selectedList.SetStringItem(i,2,"WAITING")
            
    def getIndexByNum(self,num,listControl):
        for index in range(-1,listControl.GetItemCount()):
           
            if num==listControl.GetItem(index,0).GetText():
                return index
        return -2
    

class GoEar(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        goearSearchForm = goearSearch(None, -1, "")
        self.SetTopWindow(goearSearchForm)
        goearSearchForm.Show()
        return 1

# end of class GoEar

if __name__ == "__main__":
    goear = GoEar(0)
    goear.MainLoop()
